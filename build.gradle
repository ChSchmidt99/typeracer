plugins {
  id "java"
  id "application"
  id "checkstyle"
  id "jacoco"
  id 'org.openjfx.javafxplugin' version '0.0.10'
  id "com.github.spotbugs" version "4.2.3"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
  implementation 'com.google.code.gson:gson:2.8.7'
}

application {
    mainClass = 'app.Main'
}

javafx {
  version = "11.0.2"
  modules = [ 'javafx.controls', 'javafx.fxml' ]
}

task clientJar(type: Jar) {
  dependsOn compileJava

  archiveBaseName = "client"
  from (sourceSets.main.output) {
    include "**"
    exclude "server/**"
  }

  manifest {
    attributes(
      'Main-Class': 'app.Main'
    )
  }
}

task serverJar(type: Jar) {
  dependsOn compileJava

  archiveBaseName = "server"
  from (sourceSets.main.output) {
    include "**"
    exclude "client/**"
  }

  manifest {
    attributes(
      'Main-Class': 'app.Main'
    )
  }
}

task jar(type: Jar, overwrite: true) {
  dependsOn clientJar, serverJar
  actions = []  // don't do anything besides calling the dependent jar tasks
}

task runServer(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'server.Main'
}

checkstyle {
  toolVersion '8.43'
  maxWarnings = 0
}

spotbugsMain {
  reports {
    html {
      enabled = true
    }
    xml {
      enabled = false
    }
  }
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

// TODO: (for students) Configure that jacocoTestReport is always run after successful tests,
// so that test report is always up-to-date
// Maybe even track test report and JavaDoc-HTML in Repository?

// TODO: (for students) Think about configuring the JavaDoc task used for generating JavaDoc HTML

jacocoTestReport {
  dependsOn test // always run tests before generating new report
  finalizedBy jacocoTestCoverageVerification // always check coverage after generating report
}


// TODO: (for students) Add limits or adjust limit to your team's Definition of Done
jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = "BRANCH"
        value = "COVEREDRATIO"
        minimum = 0.8
      }
    }
  }
}